{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport \"react-native-gesture-handler\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { Component } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport Tabs from \"./navigation/tabs\";\nvar Stack = createStackNavigator();\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(NavigationContainer, null, React.createElement(StatusBar, {\n        style: \"auto\"\n      }), React.createElement(Tabs, null));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\n\nvar Logo = function (_Component2) {\n  _inherits(Logo, _Component2);\n\n  var _super2 = _createSuper(Logo);\n\n  function Logo() {\n    _classCallCheck(this, Logo);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Logo, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Image, {\n        style: {\n          width: 40,\n          height: 40,\n          marginRight: 30\n        },\n        source: require(\"./assets/logo.png\")\n      });\n    }\n  }]);\n\n  return Logo;\n}(Component);","map":{"version":3,"sources":["C:/Users/jerom/reactNativeProjects/CookBook-main/App.js"],"names":["StatusBar","React","Component","NavigationContainer","createStackNavigator","Tabs","Stack","App","Logo","width","height","marginRight","require"],"mappings":";;;;;;;;;;AAAA,OAAO,8BAAP;AACA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AAEA,OAAOC,IAAP;AAGA,IAAMC,KAAK,GAAGF,oBAAoB,EAAlC;;IAEqBG,G;;;;;;;;;;;;;WACnB,kBAAS;AACP,aACE,oBAAC,mBAAD,QACE,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAC;AAAjB,QADF,EAGE,oBAAC,IAAD,OAHF,CADF;AAOD;;;;EAT8BL,S;;SAAZK,G;;IAgJfC,I;;;;;;;;;;;;;WACJ,kBAAS;AACP,aACE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,EAAT;AAAaC,UAAAA,MAAM,EAAE,EAArB;AAAyBC,UAAAA,WAAW,EAAE;AAAtC,SADT;AAEE,QAAA,MAAM,EAAEC,OAAO;AAFjB,QADF;AAMD;;;;EARgBV,S","sourcesContent":["import \"react-native-gesture-handler\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { Component } from \"react\";\nimport { Image } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\n\nimport Tabs from \"./navigation/tabs\";\n// import * as Recipe from \"./recipes\";\n\nconst Stack = createStackNavigator();\n\nexport default class App extends Component {\n  render() {\n    return (\n      <NavigationContainer>\n        <StatusBar style=\"auto\" />\n\n        <Tabs />\n      </NavigationContainer>\n    );\n  }\n}\n\n// class NavRec extends Component {\n//   render() {\n//     return (\n//       <Tab.Navigator\n//         initialRouteName=\"Recipes\"\n//         screenOptions={({ route }) => ({\n//           tabBarIcon: ({ focused, color, size }) => {\n//             let iconName;\n\n//             if (route.name === \"Recipes\") {\n//               iconName = focused ? \"md-restaurant\" : \"pizza\";\n//             } else if (route.name === \"Categories\") {\n//               iconName = focused ? \"list\" : \"book\";\n//             } else if (route.name === \"Favourites\") {\n//               iconName = focused ? \"heart-circle\" : \"heart\";\n//             } else if (route.name === \"Plan\") {\n//               iconName = focused ? \"calendar\" : \"bulb\";\n//             }\n//             return <Ionicons name={iconName} size={size} color={color} />;\n//           },\n//           tabBarActiveTintColor: \"tomato\",\n//           tabBarInactiveTintColor: \"gray\",\n//         })}\n//       >\n//         <Tab.Screen name=\"Recipes\" component={Screens.Recipes} />\n//         <Tab.Screen name=\"Categories\" component={Screens.Categories} />\n//         <Tab.Screen name=\"Favourites\" component={Screens.Favourites} />\n//         <Tab.Screen name=\"Plan\" component={Screens.Plan} />\n//       </Tab.Navigator>\n//     );\n//   }\n// }\n\n// class NavCat extends Component {\n//   render() {\n//     return (\n//       <Tab.Navigator\n//         initialRouteName=\"Categories\"\n//         screenOptions={({ route }) => ({\n//           tabBarIcon: ({ focused, color, size }) => {\n//             let iconName;\n\n//             if (route.name === \"Recipes\") {\n//               iconName = focused ? \"md-restaurant\" : \"pizza\";\n//             } else if (route.name === \"Categories\") {\n//               iconName = focused ? \"list\" : \"book\";\n//             } else if (route.name === \"Favourites\") {\n//               iconName = focused ? \"heart-circle\" : \"heart\";\n//             } else if (route.name === \"Plan\") {\n//               iconName = focused ? \"calendar\" : \"bulb\";\n//             }\n//             return <Ionicons name={iconName} size={size} color={color} />;\n//           },\n//           tabBarActiveTintColor: \"tomato\",\n//           tabBarInactiveTintColor: \"gray\",\n//         })}\n//       >\n//         <Tab.Screen name=\"Recipes\" component={Screens.Recipes} />\n//         <Tab.Screen name=\"Categories\" component={Screens.Categories} />\n//         <Tab.Screen name=\"Favourites\" component={Screens.Favourites} />\n//         <Tab.Screen name=\"Plan\" component={Screens.Plan} />\n//       </Tab.Navigator>\n//     );\n//   }\n// }\n\n// class NavFav extends Component {\n//   render() {\n//     return (\n//       <Tab.Navigator\n//         initialRouteName=\"Favourites\"\n//         screenOptions={({ route }) => ({\n//           tabBarIcon: ({ focused, color, size }) => {\n//             let iconName;\n\n//             if (route.name === \"Recipes\") {\n//               iconName = focused ? \"md-restaurant\" : \"pizza\";\n//             } else if (route.name === \"Categories\") {\n//               iconName = focused ? \"list\" : \"book\";\n//             } else if (route.name === \"Favourites\") {\n//               iconName = focused ? \"heart-circle\" : \"heart\";\n//             } else if (route.name === \"Plan\") {\n//               iconName = focused ? \"calendar\" : \"bulb\";\n//             }\n//             return <Ionicons name={iconName} size={size} color={color} />;\n//           },\n//           tabBarActiveTintColor: \"tomato\",\n//           tabBarInactiveTintColor: \"gray\",\n//         })}\n//       >\n//         <Tab.Screen name=\"Recipes\" component={Screens.Recipes} />\n//         <Tab.Screen name=\"Categories\" component={Screens.Categories} />\n//         <Tab.Screen name=\"Favourites\" component={Screens.Favourites} />\n//         <Tab.Screen name=\"Plan\" component={Screens.Plan} />\n//       </Tab.Navigator>\n//     );\n//   }\n// }\n\n// class NavPlan extends Component {\n//   render() {\n//     return (\n//       <Tab.Navigator\n//         initialRouteName=\"Plan\"\n//         screenOptions={({ route }) => ({\n//           tabBarIcon: ({ focused, color, size }) => {\n//             let iconName;\n\n//             if (route.name === \"Recipes\") {\n//               iconName = focused ? \"md-restaurant\" : \"pizza\";\n//             } else if (route.name === \"Categories\") {\n//               iconName = focused ? \"list\" : \"book\";\n//             } else if (route.name === \"Favourites\") {\n//               iconName = focused ? \"heart-circle\" : \"heart\";\n//             } else if (route.name === \"Plan\") {\n//               iconName = focused ? \"calendar\" : \"bulb\";\n//             }\n//             return <Ionicons name={iconName} size={size} color={color} />;\n//           },\n//           tabBarActiveTintColor: \"tomato\",\n//           tabBarInactiveTintColor: \"gray\",\n//         })}\n//       >\n//         <Tab.Screen name=\"Recipes\" component={Screens.Recipes} />\n//         <Tab.Screen name=\"Categories\" component={Screens.Categories} />\n//         <Tab.Screen name=\"Favourites\" component={Screens.Favourites} />\n//         <Tab.Screen name=\"Plan\" component={Screens.Plan} />\n//       </Tab.Navigator>\n//     );\n//   }\n// }\n\nclass Logo extends Component {\n  render() {\n    return (\n      <Image\n        style={{ width: 40, height: 40, marginRight: 30 }}\n        source={require(\"./assets/logo.png\")}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}