{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { Component } from \"react\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport * as Screens from \"../Screens\";\nvar Tab = createBottomTabNavigator();\n\nvar tabs = function (_Component) {\n  _inherits(tabs, _Component);\n\n  var _super = _createSuper(tabs);\n\n  function tabs() {\n    _classCallCheck(this, tabs);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(tabs, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Tab.Navigator, {\n        style: styles.tabBar,\n        initialRouteName: \"Home\",\n        screenOptions: function screenOptions(_ref) {\n          var route = _ref.route;\n          return {\n            tabBarIcon: function tabBarIcon(_ref2) {\n              var focused = _ref2.focused,\n                  color = _ref2.color,\n                  size = _ref2.size;\n              var iconName;\n\n              if (route.name === \"Home\") {\n                iconName = focused ? \"home\" : \"home-outline\";\n              } else if (route.name === \"Recipes\") {\n                iconName = focused ? \"md-restaurant\" : \"restaurant-outline\";\n              } else if (route.name === \"Categories\") {\n                iconName = focused ? \"book\" : \"book-outline\";\n              } else if (route.name === \"Favourites\") {\n                iconName = focused ? \"heart\" : \"heart-outline\";\n              }\n\n              return React.createElement(Ionicons, {\n                name: iconName,\n                size: size,\n                color: color\n              });\n            },\n            headerShown: false\n          };\n        }\n      }, React.createElement(Tab.Screen, {\n        name: \"Home\",\n        component: Screens.Home\n      }), React.createElement(Tab.Screen, {\n        name: \"Recipes\",\n        component: Screens.Recipes\n      }), React.createElement(Tab.Screen, {\n        name: \"Categories\",\n        component: Screens.Categories\n      }), React.createElement(Tab.Screen, {\n        name: \"Favourites\",\n        component: Screens.Favourites\n      }));\n    }\n  }]);\n\n  return tabs;\n}(Component);\n\nexport { tabs as default };\nvar styles = StyleSheet.create({\n  tabBar: {\n    tabBarActiveTintColor: \"tomato\",\n    tabBarInactiveTintColor: \"gray\",\n    tabBarShowLabel: false\n  }\n});","map":{"version":3,"sources":["C:/Users/jerom/reactNativeProjects/CookBook-main/navigation/tabs.js"],"names":["React","Component","Ionicons","NavigationContainer","createBottomTabNavigator","Screens","Tab","tabs","styles","tabBar","route","tabBarIcon","focused","color","size","iconName","name","headerShown","Home","Recipes","Categories","Favourites","StyleSheet","create","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarShowLabel"],"mappings":";;;;;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AAEA,OAAO,KAAKC,OAAZ;AAEA,IAAMC,GAAG,GAAGF,wBAAwB,EAApC;;IAEqBG,I;;;;;;;;;;;;;WACnB,kBAAS;AACP,aACE,oBAAC,GAAD,CAAK,SAAL;AACE,QAAA,KAAK,EAAEC,MAAM,CAACC,MADhB;AAEE,QAAA,gBAAgB,EAAC,MAFnB;AAGE,QAAA,aAAa,EAAE;AAAA,cAAGC,KAAH,QAAGA,KAAH;AAAA,iBAAgB;AAC7BC,YAAAA,UAAU,EAAE,2BAA8B;AAAA,kBAA3BC,OAA2B,SAA3BA,OAA2B;AAAA,kBAAlBC,KAAkB,SAAlBA,KAAkB;AAAA,kBAAXC,IAAW,SAAXA,IAAW;AACxC,kBAAIC,QAAJ;;AAEA,kBAAIL,KAAK,CAACM,IAAN,KAAe,MAAnB,EAA2B;AACzBD,gBAAAA,QAAQ,GAAGH,OAAO,GAAG,MAAH,GAAY,cAA9B;AACD,eAFD,MAEO,IAAIF,KAAK,CAACM,IAAN,KAAe,SAAnB,EAA8B;AACnCD,gBAAAA,QAAQ,GAAGH,OAAO,GAAG,eAAH,GAAqB,oBAAvC;AACD,eAFM,MAEA,IAAIF,KAAK,CAACM,IAAN,KAAe,YAAnB,EAAiC;AACtCD,gBAAAA,QAAQ,GAAGH,OAAO,GAAG,MAAH,GAAY,cAA9B;AACD,eAFM,MAEA,IAAIF,KAAK,CAACM,IAAN,KAAe,YAAnB,EAAiC;AACtCD,gBAAAA,QAAQ,GAAGH,OAAO,GAAG,OAAH,GAAa,eAA/B;AACD;;AACD,qBAAO,oBAAC,QAAD;AAAU,gBAAA,IAAI,EAAEG,QAAhB;AAA0B,gBAAA,IAAI,EAAED,IAAhC;AAAsC,gBAAA,KAAK,EAAED;AAA7C,gBAAP;AACD,aAd4B;AAgB7BI,YAAAA,WAAW,EAAE;AAhBgB,WAAhB;AAAA;AAHjB,SAsBE,oBAAC,GAAD,CAAK,MAAL;AAAY,QAAA,IAAI,EAAC,MAAjB;AAAwB,QAAA,SAAS,EAAEZ,OAAO,CAACa;AAA3C,QAtBF,EAuBE,oBAAC,GAAD,CAAK,MAAL;AAAY,QAAA,IAAI,EAAC,SAAjB;AAA2B,QAAA,SAAS,EAAEb,OAAO,CAACc;AAA9C,QAvBF,EAwBE,oBAAC,GAAD,CAAK,MAAL;AAAY,QAAA,IAAI,EAAC,YAAjB;AAA8B,QAAA,SAAS,EAAEd,OAAO,CAACe;AAAjD,QAxBF,EAyBE,oBAAC,GAAD,CAAK,MAAL;AAAY,QAAA,IAAI,EAAC,YAAjB;AAA8B,QAAA,SAAS,EAAEf,OAAO,CAACgB;AAAjD,QAzBF,CADF;AA6BD;;;;EA/B+BpB,S;;SAAbM,I;AAkCrB,IAAMC,MAAM,GAAGc,UAAU,CAACC,MAAX,CAAkB;AAC/Bd,EAAAA,MAAM,EAAE;AACNe,IAAAA,qBAAqB,EAAE,QADjB;AAENC,IAAAA,uBAAuB,EAAE,MAFnB;AAINC,IAAAA,eAAe,EAAE;AAJX;AADuB,CAAlB,CAAf","sourcesContent":["import { Text, StyleSheet, View } from \"react-native\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\n\r\nimport * as Screens from \"../Screens\";\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nexport default class tabs extends Component {\r\n  render() {\r\n    return (\r\n      <Tab.Navigator\r\n        style={styles.tabBar}\r\n        initialRouteName=\"Home\"\r\n        screenOptions={({ route }) => ({\r\n          tabBarIcon: ({ focused, color, size }) => {\r\n            let iconName;\r\n\r\n            if (route.name === \"Home\") {\r\n              iconName = focused ? \"home\" : \"home-outline\";\r\n            } else if (route.name === \"Recipes\") {\r\n              iconName = focused ? \"md-restaurant\" : \"restaurant-outline\";\r\n            } else if (route.name === \"Categories\") {\r\n              iconName = focused ? \"book\" : \"book-outline\";\r\n            } else if (route.name === \"Favourites\") {\r\n              iconName = focused ? \"heart\" : \"heart-outline\";\r\n            }\r\n            return <Ionicons name={iconName} size={size} color={color} />;\r\n          },\r\n\r\n          headerShown: false,\r\n        })}\r\n      >\r\n        <Tab.Screen name=\"Home\" component={Screens.Home} />\r\n        <Tab.Screen name=\"Recipes\" component={Screens.Recipes} />\r\n        <Tab.Screen name=\"Categories\" component={Screens.Categories} />\r\n        <Tab.Screen name=\"Favourites\" component={Screens.Favourites} />\r\n      </Tab.Navigator>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  tabBar: {\r\n    tabBarActiveTintColor: \"tomato\",\r\n    tabBarInactiveTintColor: \"gray\",\r\n\r\n    tabBarShowLabel: false,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}