{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { Component } from \"react\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport * as Screens from \"../Screens\";\nimport Recipes from \"../screens/Recipes\";\nimport Categories from \"../screens/Categories\";\nimport Favourites from \"../screens/Favourites\";\nimport Plan from \"../screens/Plan\";\nvar Tab = createBottomTabNavigator();\n\nvar tabs = function (_Component) {\n  _inherits(tabs, _Component);\n\n  var _super = _createSuper(tabs);\n\n  function tabs() {\n    _classCallCheck(this, tabs);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(tabs, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, null, React.createElement(Tab.Navigator, {\n        initialRouteName: \"Recipes\",\n        screenOptions: function screenOptions(_ref) {\n          var route = _ref.route;\n          return {\n            tabBarIcon: function tabBarIcon(_ref2) {\n              var focused = _ref2.focused,\n                  color = _ref2.color,\n                  size = _ref2.size;\n              var iconName;\n\n              if (route.name === \"Recipes\") {\n                iconName = focused ? \"md-restaurant\" : \"pizza\";\n              } else if (route.name === \"Categories\") {\n                iconName = focused ? \"list\" : \"book\";\n              } else if (route.name === \"Favourites\") {\n                iconName = focused ? \"heart-circle\" : \"heart\";\n              } else if (route.name === \"Plan\") {\n                iconName = focused ? \"calendar\" : \"bulb\";\n              }\n\n              return React.createElement(Ionicons, {\n                name: iconName,\n                size: size,\n                color: color\n              });\n            },\n            tabBarActiveTintColor: \"tomato\",\n            tabBarInactiveTintColor: \"gray\"\n          };\n        }\n      }, React.createElement(Tab.Screen, {\n        name: \"Recipes\",\n        component: Recipes\n      }), React.createElement(Tab.Screen, {\n        name: \"Categories\",\n        component: Categories\n      }), React.createElement(Tab.Screen, {\n        name: \"Favourites\",\n        component: Favourites\n      }), React.createElement(Tab.Screen, {\n        name: \"Plan\",\n        component: Plan\n      })));\n    }\n  }]);\n\n  return tabs;\n}(Component);\n\nexport { tabs as default };\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["C:/Users/jerom/reactNativeProjects/CookBook-main/navigation/tabs.js"],"names":["React","Component","Ionicons","createBottomTabNavigator","Screens","Recipes","Categories","Favourites","Plan","Tab","tabs","route","tabBarIcon","focused","color","size","iconName","name","tabBarActiveTintColor","tabBarInactiveTintColor","styles","StyleSheet","create"],"mappings":";;;;;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AAEA,OAAO,KAAKC,OAAZ;AAEA,OAAOC,OAAP;AACA,OAAOC,UAAP;AACA,OAAOC,UAAP;AACA,OAAOC,IAAP;AAEA,IAAMC,GAAG,GAAGN,wBAAwB,EAApC;;IAEqBO,I;;;;;;;;;;;;;WACnB,kBAAS;AACP,aACE,oBAAC,IAAD,QACE,oBAAC,GAAD,CAAK,SAAL;AACE,QAAA,gBAAgB,EAAC,SADnB;AAEE,QAAA,aAAa,EAAE;AAAA,cAAGC,KAAH,QAAGA,KAAH;AAAA,iBAAgB;AAC7BC,YAAAA,UAAU,EAAE,2BAA8B;AAAA,kBAA3BC,OAA2B,SAA3BA,OAA2B;AAAA,kBAAlBC,KAAkB,SAAlBA,KAAkB;AAAA,kBAAXC,IAAW,SAAXA,IAAW;AACxC,kBAAIC,QAAJ;;AAEA,kBAAIL,KAAK,CAACM,IAAN,KAAe,SAAnB,EAA8B;AAC5BD,gBAAAA,QAAQ,GAAGH,OAAO,GAAG,eAAH,GAAqB,OAAvC;AACD,eAFD,MAEO,IAAIF,KAAK,CAACM,IAAN,KAAe,YAAnB,EAAiC;AACtCD,gBAAAA,QAAQ,GAAGH,OAAO,GAAG,MAAH,GAAY,MAA9B;AACD,eAFM,MAEA,IAAIF,KAAK,CAACM,IAAN,KAAe,YAAnB,EAAiC;AACtCD,gBAAAA,QAAQ,GAAGH,OAAO,GAAG,cAAH,GAAoB,OAAtC;AACD,eAFM,MAEA,IAAIF,KAAK,CAACM,IAAN,KAAe,MAAnB,EAA2B;AAChCD,gBAAAA,QAAQ,GAAGH,OAAO,GAAG,UAAH,GAAgB,MAAlC;AACD;;AACD,qBAAO,oBAAC,QAAD;AAAU,gBAAA,IAAI,EAAEG,QAAhB;AAA0B,gBAAA,IAAI,EAAED,IAAhC;AAAsC,gBAAA,KAAK,EAAED;AAA7C,gBAAP;AACD,aAd4B;AAe7BI,YAAAA,qBAAqB,EAAE,QAfM;AAgB7BC,YAAAA,uBAAuB,EAAE;AAhBI,WAAhB;AAAA;AAFjB,SAqBE,oBAAC,GAAD,CAAK,MAAL;AAAY,QAAA,IAAI,EAAC,SAAjB;AAA2B,QAAA,SAAS,EAAEd;AAAtC,QArBF,EAsBE,oBAAC,GAAD,CAAK,MAAL;AAAY,QAAA,IAAI,EAAC,YAAjB;AAA8B,QAAA,SAAS,EAAEC;AAAzC,QAtBF,EAuBE,oBAAC,GAAD,CAAK,MAAL;AAAY,QAAA,IAAI,EAAC,YAAjB;AAA8B,QAAA,SAAS,EAAEC;AAAzC,QAvBF,EAwBE,oBAAC,GAAD,CAAK,MAAL;AAAY,QAAA,IAAI,EAAC,MAAjB;AAAwB,QAAA,SAAS,EAAEC;AAAnC,QAxBF,CADF,CADF;AA8BD;;;;EAhC+BP,S;;SAAbS,I;AAmCrB,IAAMU,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf","sourcesContent":["import { Text, StyleSheet, View } from \"react-native\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\n\r\nimport * as Screens from \"../Screens\";\r\n\r\nimport Recipes from \"../screens/Recipes\";\r\nimport Categories from \"../screens/Categories\";\r\nimport Favourites from \"../screens/Favourites\";\r\nimport Plan from \"../screens/Plan\";\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nexport default class tabs extends Component {\r\n  render() {\r\n    return (\r\n      <View>\r\n        <Tab.Navigator\r\n          initialRouteName=\"Recipes\"\r\n          screenOptions={({ route }) => ({\r\n            tabBarIcon: ({ focused, color, size }) => {\r\n              let iconName;\r\n\r\n              if (route.name === \"Recipes\") {\r\n                iconName = focused ? \"md-restaurant\" : \"pizza\";\r\n              } else if (route.name === \"Categories\") {\r\n                iconName = focused ? \"list\" : \"book\";\r\n              } else if (route.name === \"Favourites\") {\r\n                iconName = focused ? \"heart-circle\" : \"heart\";\r\n              } else if (route.name === \"Plan\") {\r\n                iconName = focused ? \"calendar\" : \"bulb\";\r\n              }\r\n              return <Ionicons name={iconName} size={size} color={color} />;\r\n            },\r\n            tabBarActiveTintColor: \"tomato\",\r\n            tabBarInactiveTintColor: \"gray\",\r\n          })}\r\n        >\r\n          <Tab.Screen name=\"Recipes\" component={Recipes} />\r\n          <Tab.Screen name=\"Categories\" component={Categories} />\r\n          <Tab.Screen name=\"Favourites\" component={Favourites} />\r\n          <Tab.Screen name=\"Plan\" component={Plan} />\r\n        </Tab.Navigator>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({});\r\n"]},"metadata":{},"sourceType":"module"}